name: Generate and Register JSON Schemas in Synapse

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:  # Allow manual triggering
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '0.1.0'

env:
  PYTHON_VERSION: '3.11'
  ORGANIZATION_NAME: 'HTAN2'

jobs:
  generate-and-register-schemas:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for version detection
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Extract version from git tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        fi
        echo "Version: ${{ steps.version.outputs.version }}"
    
    - name: Generate JSON Schemas
      run: |
        # Create output directory
        mkdir -p generated-schemas
        
        # Generate schemas for each module using the LinkML to Synapse script
        for module in Core Biospecimen Participant Sequencing WES scRNA-seq Clinical; do
          if [ -f "modules/$module/domains/$module.yaml" ]; then
            echo "Generating schema for $module module..."
            poetry run python scripts/linkml_to_flat_synapse_jsonschema.py \
              "modules/$module/domains/$module.yaml" \
              --class-name "$module" \
              --output-dir "generated-schemas"
          elif [ -f "modules/$module/domains/${module,,}.yaml" ]; then
            echo "Generating schema for $module module..."
            poetry run python scripts/linkml_to_flat_synapse_jsonschema.py \
              "modules/$module/domains/${module,,}.yaml" \
              --class-name "$module" \
              --output-dir "generated-schemas"
          else
            echo "No schema file found for $module module, skipping..."
          fi
        done
        
        # Also generate the main clinical schema
        if [ -f "modules/Clinical/domains/clinical.yaml" ]; then
          echo "Generating main clinical schema..."
          poetry run python scripts/linkml_to_flat_synapse_jsonschema.py \
            "modules/Clinical/domains/clinical.yaml" \
            --class-name "Clinical" \
            --output-dir "generated-schemas"
        fi
    
    - name: Register schemas in Synapse
      env:
        SYNAPSE_USERNAME: ${{ secrets.SYNAPSE_USERNAME }}
        SYNAPSE_AUTH_TOKEN: ${{ secrets.SYNAPSE_AUTH_TOKEN }}
      run: |
        # Install synapseclient
        pip install synapseclient
        
        # Register each generated schema
        for schema_file in generated-schemas/*.json; do
          if [ -f "$schema_file" ]; then
            schema_name=$(basename "$schema_file" .json)
            echo "Processing schema: $schema_name"
            
            poetry run python scripts/synapse_json_schema_bind.py \
              -p "$schema_file" \
              -n "${{ env.ORGANIZATION_NAME }}" \
              --no_bind
          fi
        done
    
    - name: Upload generated schemas as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: json-schemas-${{ steps.version.outputs.version }}
        path: generated-schemas/
        retention-days: 30
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh release create ${{ github.ref_name }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes "## JSON Schema Release ${{ steps.version.outputs.version }}
        
        This release includes updated JSON schemas for the HTAN2 data model.
        
        ### Generated Schemas:
        - Clinical Data Schema
        - Biospecimen Schema  
        - Participant Schema
        - Sequencing Schema
        - WES Schema
        - scRNA-seq Schema
        
        All schemas have been registered in Synapse under the ${{ env.ORGANIZATION_NAME }} organization."
